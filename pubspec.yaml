name: flutter_boilerplate
description: A boilerplate project created in flutter using MobX.

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
version: 1.0.0+1

environment:
  sdk: '>=3.3.0-0 <4.0.0'

# Regular dependencies are listed under dependencies:â€”these are packages that
# anyone using your package will also need.
dependencies:
  flutter:
    sdk: flutter

  provider: ^6.1.2

  # A powerful Http client for Dart, which supports Interceptors,
  # Global configuration, FormData, Request Cancellation, File downloading, Timeout etc.
  dio: ^5.4.3+1

  # This plugin allows Flutter apps to discover network
  # connectivity and configure themselves accordingly.
  # It can distinguish between cellular vs WiFi connection.
  connectivity_plus: ^6.0.3

  # Simple direct Service Locator that allows to decouple the interface
  # from a concrete implementation and to access the concrete
  # implementation from everywhere in your App
  get_it: ^7.7.0

  # Classes and helper functions that support JSON code generation
  # via the `json_serializable` package.
  json_annotation: ^4.9.0

  # MobX is a library for reactively managing the state of your applications.
  # Use the power of observables, actions, and reactions to supercharge your Dart and Flutter apps.
  mobx: ^2.3.3+2

  # Flutter integration for MobX. It provides a set of Observer widgets
  # that automatically rebuild when the tracked observables change.
  flutter_mobx: ^2.2.1+1

  # Flutter plugin for reading and writing simple key-value pairs.
  # Wraps NSUserDefaults on iOS and SharedPreferences on Android.
  shared_preferences: ^2.2.3

  # Official extension image, support placeholder(loading)/ failed state, cache network, zoom/pan,
  # photo view, slide out page, editor(crop,rotate,flip), painting etc.
  extended_image: ^8.2.1

  # AutoRoute is a declarative routing solution, where everything
  # needed for navigation is automatically generated for you.
  auto_route: ^8.1.3

  # Easy and Fast internationalizing and localization your Flutter Apps,
  # this package simplify the internationalizing process .
  easy_localization: ^3.0.7

  # Annotations for the freezed code-generator. This package does nothing without freezed too.
  freezed_annotation: ^2.4.1

  # RxDart is an implementation of the popular reactiveX api for asynchronous programming,
  # leveraging the native Dart Streams api.
  rxdart: ^0.27.7

  # Flutter plugin for launching a URL. Supports web, phone, SMS, and email schemes.
  url_launcher: ^6.2.6

  # retrofit is a type conversion dio client generator using source_gen and inspired by Chopper and Retrofit.
  retrofit: ^4.1.0

  # A Flutter implementation of React hooks:
  flutter_hooks: ^0.20.5

  # Provider support for overlay, make it easy to build toast and In-App notification.
  overlay_support: ^2.1.0

  # The Flutter code generator for your assets, fonts, colors.
  flutter_gen: ^5.5.0+1

  # Theme Tailor, a code generator and theming utility for supercharging Flutter ThemeExtension classes introduced in Flutter 3.0! The generator helps to minimize the required boilerplate code
  theme_tailor: ^3.0.1
  theme_tailor_annotation: ^3.0.1
  gap: ^3.0.1


# Dependencies that are only needed in the development phase
# of the package itself are listed under dev_dependencies.
dev_dependencies:
  # Provides API to test Flutter applications that run on real devices and emulators.
  flutter_driver:
    sdk: flutter

  # AutoRoute is a declartive routing solution, where everything
  # needed for navigation is automatically generated for you.
  auto_route_generator: ^8.0.0

  # A build system for Dart code generation and modular compilation.
  build_runner: ^2.4.10

  # Automatically generate code for converting to and from JSON by annotating Dart classes.
  json_serializable: ^6.8.0

  # Code generator for MobX that adds support for annotating your code with
  # @observable, @computed, @action and also creating Store classes.
  mobx_codegen: ^2.6.1

  # Code generation for immutable classes that has a simple
  # syntax/API without compromising on the features.
  freezed: ^2.5.2

  # retrofit.dart is a type conversion dio client generator using source_gen and inspired by Chopper and Retrofit.
  retrofit_generator: ^8.1.0

  # he Flutter code generator for your assets, fonts, color.
  flutter_gen_runner: ^5.5.0+1

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  assets:
    - assets/translations/
    - assets/images/
    - assets/fonts/

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware.

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  fonts:
    - family: Mulish
      fonts:
        - asset: assets/fonts/Mulish/Mulish-Regular.ttf
          weight: 400
        - asset: assets/fonts/Mulish/Mulish-Bold.ttf
          weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
flutter_gen:
  output: lib/gen/
  line_length: 80
  integrations:
    flutter_svg: true
    flare_flutter: false
    rive: false
    lottie: false
    #  assets:
    # Optional
    #    enabled: true
    # Optional
    outputs:
      # Optional
      # Set to true if you want this package to be a package dependency
      # See: https://flutter.dev/docs/development/ui/assets-and-images#from-packages
      package_parameter_enabled: false
      # Optional
      # Available values:
      # - camel-case
      # - snake-case
      # - dot-delimiter
      style: camel-case
    #      class_name: Assets
    #    exclude:
    #      [
    #        "assets/translations/*.json",
    #        "assets/icons/1.5x/*",
    #        "assets/icons/2.0x/*",
    #        "assets/icons/3.0x/*",
    #        "assets/icons/4.0x/*",
    #      ]
    #  fonts:
    # Optional
    #    enabled: true
    # Optional
  #    outputs:
  #      class_name: FontFamily
  colors:
    # Optional
    enabled: true
    # Optional
    inputs:
      - assets/colors/colors.xml
    # Optional
    outputs:
      class_name: AppColors